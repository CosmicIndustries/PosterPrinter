from PIL import Image, ImageOps
import fitz  # PyMuPDF
import os
import requests
from skimage.transform import resize
from skimage import io
from fastai.vision.all import *

# Disable decompression bomb check if needed (use with caution)
Image.MAX_IMAGE_PIXELS = None

# Pillow Content-Aware Resizing
def content_aware_resize(image, target_width, target_height):
    """Resizes the image to the specified target width and height with content-aware resizing."""
    image_resized = ImageOps.fit(image, (target_width, target_height), method=0, bleed=0.0, centering=(0.5, 0.5))
    return image_resized

# Scikit-Image Upscaling
def upscale_image_with_skimage(image, target_shape):
    """Upscales image using Scikit-Image's resize method."""
    image_resized = resize(image, target_shape, mode='reflect', anti_aliasing=True)
    return Image.fromarray((image_resized * 255).astype('uint8'))

# FastAI Image Enhancement (for illustration, you can fine-tune the model for actual tasks)
def enhance_with_fastai(image_path):
    """Uses FastAI's pre-trained model for image enhancement (e.g., super-resolution)."""
    learn = cnn_learner(dls=None, arch=resnet34, metrics=accuracy)
    img = PILImage.create(image_path)
    
    # Enhance the image (this is just for illustration)
    pred_class, pred_idx, outputs = learn.predict(img)
    return img  # For now, return the input image as output

# AVIF Compression using Pillow
def compress_with_avif(input_image_path, output_image_path):
    """Compresses image to AVIF format using Pillow."""
    image = Image.open(input_image_path)
    image.save(output_image_path, format='AVIF')
    return output_image_path

def resize_image(image, target_width, target_height):
    """Resize the image to the specified target width and height."""
    return image.resize((target_width, target_height), Image.LANCZOS)

def split_image(image_path, output_folder, rows, cols, tile_width, tile_height, overlap):
    """Split image into smaller tiles based on the specified grid and tile dimensions."""
    target_width = tile_width * cols
    target_height = tile_height * rows

    image = Image.open(image_path)
    image = content_aware_resize(image, target_width, target_height)  # Apply content-aware resize

    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for row in range(rows):
        for col in range(cols):
            # Compute tile boundaries with overlap
            left = max(0, col * tile_width - overlap)
            upper = max(0, row * tile_height - overlap)
            right = min(target_width, left + tile_width + overlap)
            lower = min(target_height, upper + tile_height + overlap)

            tile = image.crop((left, upper, right, lower))
            tile.save(f"{output_folder}/tile_{row+1}_{col+1}.png")

    print(f"Image resized to {target_width}x{target_height} and split into {rows * cols} tiles with {overlap}px overlap saved to {output_folder}.")

def split_pdf(pdf_path, output_folder, rows, cols, tile_width, tile_height, dpi, overlap):
    """Split a PDF into images and then into smaller tiles based on the specified grid and tile dimensions."""
    target_width = tile_width * cols
    target_height = tile_height * rows

    doc = fitz.open(pdf_path)

    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for page_num in range(len(doc)):
        page = doc[page_num]
        pix = page.get_pixmap(dpi=dpi)
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        img = content_aware_resize(img, target_width, target_height)  # Apply content-aware resize

        img_path = f"{output_folder}/page_{page_num+1}.png"
        img.save(img_path, dpi=(dpi, dpi))

        split_image(img_path, output_folder, rows, cols, tile_width, tile_height, overlap)

    print(f"PDF resized to {target_width}x{target_height} and split into {rows * cols} tiles per page with {overlap}px overlap saved to {output_folder}.")

def get_paper_size_dimensions(paper_size, dpi):
    """Return the tile dimensions (width and height) based on the selected paper size and DPI."""
    paper_sizes_in_inches = {
        "letter": (8.5, 11),
        "a4": (8.3, 11.7),
        "legal": (8.5, 14),
    }

    # Get the dimensions for the paper size, default to letter size if not found
    width_in_inches, height_in_inches = paper_sizes_in_inches.get(paper_size.lower(), paper_sizes_in_inches["letter"])

    # Convert inches to pixels based on DPI
    width_in_pixels = int(width_in_inches * dpi)
    height_in_pixels = int(height_in_inches * dpi)

    return width_in_pixels, height_in_pixels

if __name__ == "__main__":
    file_path = input("Enter the file path (image or PDF): ")
    output_folder = input("Enter the output folder: ")

    try:
        rows = int(input("Enter the number of rows: "))
        cols = int(input("Enter the number of columns: "))
        dpi = int(input("Enter the DPI (e.g., 900): "))
        overlap = int(input("Enter the overlap in pixels (default 0): "))
        paper_size = input("Enter the paper size (letter, a4, legal): ").lower()
    except ValueError:
        print("Error: Please enter valid numeric values.")
        exit(1)

    # Get the tile dimensions based on the selected paper size and DPI
    tile_width, tile_height = get_paper_size_dimensions(paper_size, dpi)

    print(f"Each tile will be {tile_width}x{tile_height} pixels.")

    # Process the image with AI/ML enhancements before splitting
    if file_path.lower().endswith(".pdf"):
        split_pdf(file_path, output_folder, rows, cols, tile_width, tile_height, dpi, overlap)
    else:
        split_image(file_path, output_folder, rows, cols, tile_width, tile_height, overlap)
